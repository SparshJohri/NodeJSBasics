 We are in the process of building a dictionary web application that will help us communicate some of the definitions of our favorite terms. In the last lesson, we created the Express app and we added the Express static middleware to serve the files that we have in the public folder statically. So in this lesson, Chapter 8, Lesson 3, under the start folder, we already have our Express app created in app js and we also already have the client files for this application coded inside of the public folder.

Let's go ahead and start our application to see what we've done thus far. Now when I come out to the start folder and run node app, something funny is going to happen. I get an error that says I cannot find the module express. Now I get this error frequently. My app js file is looking for the Express module, but I don't have it installed. And the reason that I don't have it installed, is because I am in a totally different lesson folder. If you're working from the same folder, you will already have Express installed and you won't need to take this step.

But if you're following along from Chapter 8, Lesson 3 start folder, you will notice that we do not have node modules which means that we do not have Express installed. Our package json file lists all the dependencies that we need for this application, so it's never a bad idea just to run in npm install and that will fix our problem because now we will install all of the node modules that this application is dependant upon. Now if I clear the screen, and node our app, we can run it, and here we have installed Express so we no longer have that problem.

We have an Express app running on port 3000. I can't tell you how many times simply running an npm install fixes errors that I have when I tried to run an app without installing dependencies. So let's go ahead and switch over to the browser and navigate to local host 3000, since our app is currently running. And when we come here, we see that we have a nice dictionary but if I actually open the Chrome developer tools, by clicking on this little hamburger menu, and going to More Tools, and then selecting Developer Tools, we will see that I have one error.

Now, my developer tools are on the network tab. If I switch over to the console tab, we can see that we are having an error finding the dictionary api. So, our client JavaScript file is trying to load the skier terms from dictionary api. If I go to local host 3000/dictionary api, you can see that we do not have anything set up at this route. So, in this next lesson, we are going to define the dictionary api route to return our terms and definitions. So let's go ahead and go over to our files, and let's open up our app js file, where we coded our Express server.

And the first thing that I wanna do to this file is I actually need to add the data. So I'm going to add some skier terms. And here I have an array of skier terms. Now, you can define whatever terms you would like in this lesson. It doesn't really matter. The real key is that you create a variable that has an array of objects, and each of those objects needs to contain a term and a defined. The term is what we are seeking to define and the defined node represents the definition.

So, so long as you create an array of objects that have term and defined in each object, you can create any definitions you'd like. Now what I want to do, is I want to take this array of terms and serve on the dictionary api route. So, I'm going to go ahead and scroll down here and add an Express route, right below where we wired up the Express static middleware on line 25. So I'm going to drop my cursor on line 26, hit Enter for some space, and now I'm going to use the app.get function. The app.get function will set up a get route for me.

The first argument that it takes is the location for that route, so this is going to be at /dictionary-api. And the second argument is going to be the function that will actually handle any requests for that specific route. This function will take in our request object and our response object. Now these are the same request and response objects that we used with the http server, but they've been powered up by Express. Express has decorated these objects, has added some functionality to them to make things easy for us.

For instance, the response object now has a json function. In the response, json function will simply take a json object, like our skiier terms and automatically handle stringifying it, and setting up the headers to reply with a json response. So, if I set up this route for the dictionary api and respond with the json skiier terms, I should be able to go back out to my terminal and stop my last application from running, clear the screen and run the app again. And now I have my Express app running on port 3000 so I can navigate to the browser and the first thing I'm going to do is refresh this request for local host 3000/dictionary api.

And when I do so, we can see that we now have our skiier terms, so a request for a dictionary api will return an array of definitions for skiing. Now, I'm going to go ahead and close out these developer tools, and I'm going to go to local host 3000. Now, we can see our skiier terms on the page. That's because this application makes an ajax request for that route. So, we're actually loading the term data from our app js file. Now, if I open up the developer tools again, go into More Tools, Developer Tools, and then I navigate to the network panel, I can then hit refresh and make this request again, and we can see that everything is being successfully loaded, including our XHR request for the dictionary api.

Now, our dictionary api works great, but it has some limitations. The dictionary api, by default, is only allowed to serve this data to requests made for it from the same domain name. So our application works because our application is running on local host 3000 and our dictionary is also running on local host 3000. But what happens if our client application is running from skierdictionary.com and our dictionary api is running from skierterms.com? That means that this data, we would not be able to serve to a different domain name.

So we can only serve this data to the exact same domain. Now, we've already installed a module that will help us get around that. If you go to your files, you will notice in your node modules folder that you have something called "cors." Cors stands for "cross origin resource sharing," and this specific module is a piece of middleware that we can add to our Epress pipeline to solve this problem. Let's go back into our file and add the cors module. So, I'm going to scroll to the top, and right after I require Express, I'm going to require cors.

And now that I have the cors module, I can use it. Cors is a function and it's a function that will return some middleware. So, I'm going to scroll down in my application and what I want to do is add cross origin resource sharing to all of my api requests, so in order to do that, I'm going to add it below where we added the static middleware, and I will app use cors. So, now we've added cross origin resource sharing to our application. This means that any domain can make a request for our dictionary api.